#!/bin/bash

#******************************* Build Zephyr application *******************************

set -e

################################################################################
# CLEANUP CMAKE CACHE
################################################################################
if [ -d "$HOME/.cmake/packages/Zephyr" ]; then
    rm -r "$HOME/.cmake/packages/Zephyr"
fi

if [ -d "$HOME/.cmake/packages/Zephyr-sdk" ]; then
    rm -r "$HOME/.cmake/packages/Zephyr-sdk"
fi

################################################################################
# SETUP ENVIROMENT AND ZEPHYR DEPENDENCIES
################################################################################

# Setup top level directories: ZEPHYRWW_HOME, ZEPHYRWW_SCRIPTS
if [ -z "$ZEPHYRWW_HOME" ]; then
  ZEPHYRWW_HOME="${HOME}/.zephyrww"
fi

if [ ! -d "$ZEPHYRWW_HOME" ]; then
  echo "Invalid ZEPHYRWW_HOME: $ZEPHYRWW_HOME. Zephyrww may not be installed." >&2
  exit 1
fi

ZEPHYRWW_SCRIPTS=$ZEPHYRWW_HOME/scripts

export ZEPHYRWW_HOME=$ZEPHYRWW_HOME # for used in python scripts

# Activate Zephyrww's python virtual env
source $ZEPHYRWW_HOME/.venv/bin/activate 

# Parse arguments and export as env vars: BOARD, ZEPHYR_VERSION, BUILD_DIR, SOURCE_DIR
source $ZEPHYRWW_SCRIPTS/parse_build_args.sh "$@"

# If ZEPHYR_VERSION is latest, then fetch its actuall value
if [ "$ZEPHYR_VERSION" = "latest" ]; then
    echo "ZEPHYR_VERSION is set to 'latest'. Retrieving latest version..."
    ZEPHYR_VERSION=$(python $ZEPHYRWW_HOME/scripts/get_latest_zephyr_version.py)
    if [ -z "$ZEPHYR_VERSION" ]; then
        echo "Failed to retrieve Zephyr version."
        exit 1
    fi
    echo "Using latest Zephyr version: $ZEPHYR_VERSION"
fi

# Ensure the zephyr installation for specified version exists
python $ZEPHYRWW_HOME/scripts/ensure_zephyr_installation.py --zephyr-version=$ZEPHYR_VERSION

################################################################################
# Install ztest-build-ext if not exists
################################################################################
UT_MODULE_DIR=$ZEPHYRWW_HOME/ztest-build-ext
if [ ! -d "$UT_MODULE_DIR" ]; then
  echo "ztest-build-ext module not found. Cloning it." >&2
  git clone https://github.com/htringuyen/ztest-build-ext.git $ZEPHYRWW_HOME/ztest-build-ext
fi

################################################################################
# BUILD APP WITH CMAKE
################################################################################

# Export top level directory paths for Zephyr installation
ZEPHYR_INSTALLATION_DIR="${ZEPHYRWW_HOME}/${ZEPHYR_VERSION}"
ZEPHYR_DIR="${ZEPHYR_INSTALLATION_DIR}/zephyr"
ZEPHYR_SDK_DIR="${ZEPHYR_INSTALLATION_DIR}/zephyr-sdk"
ZEPHYR_MODULES_BASE="${ZEPHYR_INSTALLATION_DIR}/modules"
BOOTLOADER_BASE="${ZEPHYR_INSTALLATION_DIR}/bootloader"

# Set ZEPHYR_MODULES env var for use in cmake
ZEPHYR_MODULES_LIST=(
    "${ZEPHYR_MODULES_BASE}/lib/acpica"
    "${ZEPHYR_MODULES_BASE}/hal/cmsis"
    "${ZEPHYR_MODULES_BASE}/lib/cmsis-dsp"
    "${ZEPHYR_MODULES_BASE}/lib/cmsis-nn"
    "${ZEPHYR_MODULES_BASE}/hal/cmsis_6"
    "${ZEPHYR_MODULES_BASE}/fs/fatfs"
    "${ZEPHYR_MODULES_BASE}/hal/adi"
    "${ZEPHYR_MODULES_BASE}/hal/ambiq"
    "${ZEPHYR_MODULES_BASE}/hal/atmel"
    "${ZEPHYR_MODULES_BASE}/hal/bouffalolab"
    "${ZEPHYR_MODULES_BASE}/hal/espressif"
    "${ZEPHYR_MODULES_BASE}/hal/ethos_u"
    "${ZEPHYR_MODULES_BASE}/hal/gigadevice"
    "${ZEPHYR_MODULES_BASE}/hal/infineon"
    "${ZEPHYR_MODULES_BASE}/hal/intel"
    "${ZEPHYR_MODULES_BASE}/hal/microchip"
    "${ZEPHYR_MODULES_BASE}/hal/nordic"
    "${ZEPHYR_MODULES_BASE}/hal/nuvoton"
    "${ZEPHYR_MODULES_BASE}/hal/nxp"
    "${ZEPHYR_MODULES_BASE}/hal/openisa"
    "${ZEPHYR_MODULES_BASE}/hal/quicklogic"
    "${ZEPHYR_MODULES_BASE}/hal/renesas"
    "${ZEPHYR_MODULES_BASE}/hal/rpi_pico"
    "${ZEPHYR_MODULES_BASE}/hal/silabs"
    "${ZEPHYR_MODULES_BASE}/hal/st"
    "${ZEPHYR_MODULES_BASE}/hal/stm32"
    "${ZEPHYR_MODULES_BASE}/hal/tdk"
    "${ZEPHYR_MODULES_BASE}/hal/telink"
    "${ZEPHYR_MODULES_BASE}/hal/ti"
    "${ZEPHYR_MODULES_BASE}/hal/wch"
    "${ZEPHYR_MODULES_BASE}/hal/wurthelektronik"
    "${ZEPHYR_MODULES_BASE}/hal/xtensa"
    "${ZEPHYR_MODULES_BASE}/lib/hostap"
    "${ZEPHYR_MODULES_BASE}/lib/liblc3"
    "${ZEPHYR_MODULES_BASE}/lib/libmctp"
    "${ZEPHYR_MODULES_BASE}/hal/libmetal"
    "${ZEPHYR_MODULES_BASE}/fs/littlefs"
    "${ZEPHYR_MODULES_BASE}/lib/loramac-node"
    "${ZEPHYR_MODULES_BASE}/lib/gui/lvgl"
    "${ZEPHYR_MODULES_BASE}/crypto/mbedtls"
    "${BOOTLOADER_BASE}/mcuboot"
    "${ZEPHYR_MODULES_BASE}/debug/mipi-sys-t"
    "${ZEPHYR_MODULES_BASE}/bsim_hw_models/nrf_hw_models"
    "${ZEPHYR_MODULES_BASE}/lib/nrf_wifi"
    "${ZEPHYR_MODULES_BASE}/lib/open-amp"
    "${ZEPHYR_MODULES_BASE}/lib/openthread"
    "${ZEPHYR_MODULES_BASE}/debug/percepio"
    "${ZEPHYR_MODULES_BASE}/lib/picolibc"
    "${ZEPHYR_MODULES_BASE}/debug/segger"
    "${ZEPHYR_MODULES_BASE}/crypto/tinycrypt"
    "${ZEPHYR_MODULES_BASE}/tee/tf-a/trusted-firmware-a"
    "${ZEPHYR_MODULES_BASE}/tee/tf-m/trusted-firmware-m"
    "${ZEPHYR_MODULES_BASE}/lib/uoscore-uedhoc"
    "${ZEPHYR_MODULES_BASE}/lib/zcbor"
)

ZEPHYR_MODULES_STRING=""
for module in "${ZEPHYR_MODULES_LIST[@]}"; do
    if [ -z "$ZEPHYR_MODULES_STRING" ]; then
        ZEPHYR_MODULES_STRING="$module"
    else
        ZEPHYR_MODULES_STRING="$ZEPHYR_MODULES_STRING;$module"
    fi
done
export ZEPHYR_MODULES="$ZEPHYR_MODULES_STRING"
export ZEPHYR_BASE="$ZEPHYR_INSTALLATION_DIR/zephyr"

# Clean the build directory if it exists
if [ -d "$BUILD_DIR" ]; then
  echo "Cleaning existing build directory: $BUILD_DIR"
  rm -rf "$BUILD_DIR"
fi

export ZEPHYR_ENTRY_POINT="$ZEPHYR_DIR/share/zephyr-package/cmake"
export ZEPHYR_SDK_INSTALL_DIR="$ZEPHYR_SDK_DIR"
export ZEPHYR_BASE="$ZEPHYR_INSTALLATION_DIR/zephyr"

# Run cmake configuration and build
#cmake -P "$ZEPHYR_DIR/share/zephyr-package/cmake/zephyr_export.cmake"
#cmake -P "$ZEPHYR_SDK_DIR/cmake/zephyr_sdk_export.cmake"
cmake -B"$BUILD_DIR" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
    -DZEPHYR_MODULES="$ZEPHYR_MODULES" -DCMAKE_MODULE_PATH="$UT_MODULE_DIR/cmake/share" -GNinja -DBOARD="$BOARD" "$SOURCE_DIR"
cmake --build "$BUILD_DIR"